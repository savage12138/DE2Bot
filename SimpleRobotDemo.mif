-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  -- 	JUMP   Init        ; Reset vector
           001 : 2895;  -- 	JUMP   Sonar_Int   ; Sonar interrupt (unused)
           002 : B000;  -- 	RETI			   ; Timer interrupt
           003 : B000;  -- 	RETI               ; UART interrupt (unused)
           004 : B000;  -- 	RETI               ; Motor stall interrupt (unused)
           005 : 0B02;  -- 	LOAD   Zero
           006 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           007 : 988B;  -- 	OUT    RVELCMD
           008 : 117E;  -- 	STORE  DVel        ; Reset API variables
           009 : 117D;  -- 	STORE  DTheta
           00A : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           00B : 82E4;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00C : 82C6;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           00D : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00E : 0B17;  -- 	LOAD   FullMask
           00F : 98B2;  -- 	OUT	   SONAREN
           010 : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           011 : 4B11;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           012 : 3818;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           013 : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           014 : 4B0E;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           015 : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           016 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           017 : 2810;  -- 	JUMP   WaitForSafety
           018 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           019 : 4B0E;  -- 	AND    Mask1
           01A : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           01B : 12FA;  -- 	STORE  Temp        ; (overkill, but looks nice)
           01C : 6001;  -- 	SHIFT  1
           01D : 52FA;  -- 	OR     Temp
           01E : 9807;  -- 	OUT    XLEDS
           01F : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           020 : 4B0F;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           021 : 3818;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           022 : 0B02;  -- 	LOAD   Zero
           023 : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           024 : 98C3;  -- 	OUT    RESETPOS    ; reset the odometry to 0,0,0
           025 : B990;  -- 	LOADI	400
           026 : 98B0;  -- 	OUT		SONALARM		 ; write HalfMeter to SONALARM to set interrupt
           027 : B83F;  -- 	LOADI	&B00111111
           028 : 98B1;  -- 	OUT		SONARINT		 ; only enable the front and side sonars to interrupt
           029 : A801;  -- 	SEI		&B0001		 ; enable interrupts from source 1 (sonar)
           02A : 282B;  -- 	JUMP	GoStraight	 ; go straight indefinitely
           02B : 0B0C;  -- 	LOAD	Ten
           02C : 9805;  -- 	OUT		SSEG2
           02D : 0B25;  -- 	LOAD	FMid
           02E : 117E;  -- 	STORE	DVel
           02F : 90C2;  -- 	IN		THETA
           030 : 117D;  -- 	STORE	DTheta
           031 : 817F;  -- 	CALL	ControlMovement
           032 : 282B;  -- 	JUMP	GoStraight
           033 : 0003;  -- NCNT:		DW 3
           034 : 005A;  -- CCNT:       DW 90
           035 : 0000;  -- OLDVAL:		DW 0	
           036 : 000A;  -- RCNT:       DW 10
           037 : 9002;  -- 	IN 		TIMER
           038 : 1035;  -- 	STORE   OLDVAL
           039 : BF38;  -- 	LOADI   -200
           03A : 9883;  -- 	OUT     LVELCMD
           03B : 988B;  -- 	OUT     RVELCMD
           03C : 9002;  -- 	IN      TIMER
           03D : 2035;  -- 	SUB     OLDVAL
           03E : 2036;  -- 	SUB     RCNT
           03F : 3039;  -- 	JNEG    REVERSELOOP
           040 : 9002;  -- 	IN      TIMER
           041 : 1035;  -- 	STORE   OLDVAL
           042 : 90AD;  -- 	IN		DIST5
           043 : 231A;  -- 	SUB		Ft1
           044 : 3052;  -- 	JNEG	DoLarge
           045 : 90AC;  -- 	IN		DIST4
           046 : 231A;  -- 	SUB		Ft1
           047 : 3059;  -- 	JNEG	DoVeryLarge
           048 : 90AD;  -- 	IN		DIST5
           049 : 231B;  -- 	SUB		Ft2
           04A : 3860;  -- 	JPOS	DoSmall
           04B : 0B0A;  -- 	LOAD	Eight
           04C : 9805;  -- 	OUT		SSEG2
           04D : B9FE;  -- 	LOADI   510
           04E : 9883;  -- 	OUT     LVELCMD
           04F : B91D;  -- 	LOADI	285
           050 : 988B;  -- 	OUT		RVELCMD
           051 : 2866;  -- 	JUMP	CheckTime
           052 : 0B09;  -- 	LOAD	Seven
           053 : 9805;  -- 	OUT		SSEG2
           054 : B9C2;  -- 	LOADI   450
           055 : 9883;  -- 	OUT     LVELCMD
           056 : B91D;  -- 	LOADI	285
           057 : 988B;  -- 	OUT		RVELCMD
           058 : 2866;  -- 	JUMP	CheckTime
           059 : 0B09;  -- 	LOAD	Seven
           05A : 9805;  -- 	OUT		SSEG2
           05B : B990;  -- 	LOADI   400
           05C : 9883;  -- 	OUT     LVELCMD
           05D : B91D;  -- 	LOADI	285
           05E : 988B;  -- 	OUT		RVELCMD
           05F : 2866;  -- 	JUMP	CheckTime
           060 : 0B08;  -- 	LOAD	Six
           061 : 9805;  -- 	OUT		SSEG2
           062 : B9FE;  -- 	LOADI   510
           063 : 9883;  -- 	OUT     LVELCMD
           064 : B909;  -- 	LOADI	265
           065 : 988B;  -- 	OUT		RVELCMD
           066 : 0833;  -- 	LOAD	NCNT
           067 : 3042;  -- 	JNEG	CIRCLELOOP
           068 : 9002;  -- 	IN		TIMER
           069 : 2034;  -- 	SUB  	CCNT
           06A : 2035;  -- 	SUB     OLDVAL
           06B : 9804;  -- 	OUT	    SSEG1
           06C : 3042;  -- 	JNEG	CIRCLELOOP
           06D : 90AA;  -- 	IN		DIST2
           06E : 231C;  -- 	SUB		Ft25
           06F : 3077;  -- 	JNEG	OutLoop2
           070 : 90A9;  -- 	IN		DIST1
           071 : 231C;  -- 	SUB		Ft25
           072 : 307D;  -- 	JNEG	OutLoop1
           073 : 90A8;  -- 	IN		DIST0
           074 : 231C;  -- 	SUB		Ft25
           075 : 3083;  -- 	JNEG	OutLoop0
           076 : 2842;  -- 	JUMP    CIRCLELOOP
           077 : 0B02;  -- 	LOAD	 Zero
           078 : 98C2;  -- 	OUT	 THETA
           079 : 680C;  -- 	ADDI	 12
           07A : 1134;  -- 	STORE	 Angle
           07B : 8125;  -- 	CALL	 KeepTurning
           07C : 28A1;  -- 	JUMP	 End_Sonar_Int
           07D : 0B02;  -- 	LOAD	 Zero
           07E : 98C2;  -- 	OUT	 THETA
           07F : 6832;  -- 	ADDI	 50
           080 : 1134;  -- 	STORE	 Angle
           081 : 8125;  -- 	CALL	 KeepTurning
           082 : 28A1;  -- 	JUMP	 End_Sonar_Int
           083 : 0B02;  -- 	LOAD	 Zero
           084 : 98C2;  -- 	OUT	 THETA
           085 : 685F;  -- 	ADDI	 95
           086 : 1134;  -- 	STORE	 Angle
           087 : 8125;  -- 	CALL	 KeepTurning
           088 : 28A1;  -- 	JUMP	 End_Sonar_Int
           089 : 813C;  -- 	CALL     TURN180
           08A : 28A1;  -- 	JUMP     End_Sonar_Int
           08B : A00F;  -- 	CLI    &B1111      ; disable all interrupts
           08C : 0B02;  -- 	LOAD   Zero        ; Stop everything.
           08D : 9883;  -- 	OUT    LVELCMD
           08E : 988B;  -- 	OUT    RVELCMD
           08F : 98B2;  -- 	OUT    SONAREN
           090 : 0893;  -- 	LOAD   DEAD        ; An indication that we are dead
           091 : 9805;  -- 	OUT    SSEG2       ; "dEAd" on the sseg
           092 : 2892;  -- 	JUMP   Forever     ; Do this forever.
           093 : DEAD;  -- 	DEAD:  DW &HDEAD   ; Example of a "local" variable
           094 : 0000;  -- 	DW		&H0000
           095 : 0833;  -- 	LOAD	NCNT
           096 : 6801;  -- 	ADDI	1
           097 : 1033;  -- 	STORE	NCNT
           098 : 0B0B;  -- 	LOAD	Nine
           099 : 9805;  -- 	OUT		SSEG2
           09A : 0B02;  -- 	LOAD	Zero
           09B : 98B1;  -- 	OUT	 	SONARINT	 ; close the interrupt during stopping
           09C : 0894;  -- 	LOAD	SonarState
           09D : 28C6;  -- 	JUMP	StopBot		 ; State 0 is StopBot
           09E : 28CD;  -- 	JUMP  Closest		 ; State 1 is Closest
           09F : 28F7;  -- 	JUMP  TurnToReflector		 ; State 2 is TurnToReflector
           0A0 : 2837;  -- 	JUMP  Circling
           0A1 : B83F;  -- 	LOADI	 &B00111111	 
           0A2 : 98B1;  -- 	OUT	 	 SONARINT	 ; reopen the interrupt
           0A3 : B000;  -- 	RETI
           0A4 : 01F4;  -- MAXVALUE:	 DW 500
           0A5 : 0000;  -- TEMPCNT:     DW 0
           0A6 : B800;  -- 	LOADI    0
           0A7 : 10A5;  -- 	STORE    TEMPCNT
           0A8 : 90A9;  -- 	IN       DIST1
           0A9 : 20A4;  -- 	SUB      MAXVALUE
           0AA : 38AE;  -- 	JPOS     NEXT1
           0AB : 08A5;  -- 	LOAD     TEMPCNT
           0AC : 6801;  -- 	ADDI     1
           0AD : 10A5;  -- 	STORE    TEMPCNT
           0AE : 90AA;  -- 	IN       DIST2
           0AF : 20A4;  -- 	SUB      MAXVALUE
           0B0 : 38B4;  -- 	JPOS	 NEXT2
           0B1 : 08A5;  -- 	LOAD     TEMPCNT
           0B2 : 6801;  -- 	ADDI     1
           0B3 : 10A5;  -- 	STORE    TEMPCNT
           0B4 : 90AB;  -- 	IN       DIST3
           0B5 : 20A4;  -- 	SUB      MAXVALUE
           0B6 : 38BA;  -- 	JPOS	 NEXT3
           0B7 : 08A5;  -- 	LOAD     TEMPCNT
           0B8 : 6801;  -- 	ADDI     1
           0B9 : 10A5;  -- 	STORE    TEMPCNT
           0BA : 90AC;  -- 	IN       DIST4
           0BB : 20A4;  -- 	SUB      MAXVALUE
           0BC : 38C0;  -- 	JPOS	 NEXT4
           0BD : 08A5;  -- 	LOAD     TEMPCNT
           0BE : 6801;  -- 	ADDI     1
           0BF : 10A5;  -- 	STORE    TEMPCNT
           0C0 : 08A5;  -- 	LOAD     TEMPCNT
           0C1 : 6FFC;  -- 	ADDI     -4
           0C2 : 40A0;  -- 	JZERO    State3
           0C3 : 30A0;  -- 	JNEG     State3
           0C4 : 813C;  -- 	CALL     TURN180
           0C5 : 28A1;  -- 	JUMP     End_Sonar_Int
           0C6 : 0B02;  -- 	LOAD	 Zero
           0C7 : 117E;  -- 	STORE	 DVel			 ; set speed to 0
           0C8 : 817F;  -- 	CALL	 ControlMovement
           0C9 : 9082;  -- 	IN	 	 LVEL		 ; read in odometry data
           0CA : 230C;  -- 	SUB	 Ten			 ; check whether it's above 10
           0CB : 38C6;  -- 	JPOS	 StopBot		 ; if it's not slow enough, keep stopping the robot
           0CC : 289E;  -- 	JUMP	 State1
           0CD : 90A8;  -- 	IN		 DIST0
           0CE : 10F5;  -- 	STORE	 MinValue	 ; give out AC for next reading
           0CF : B800;  -- 	LOADI	 0
           0D0 : 10F6;  -- 	STORE	 MinIndex
           0D1 : 90A9;  -- 	IN		 DIST1
           0D2 : 20F5;  -- 	SUB	 MinValue	 ; DIST1 - MinValue
           0D3 : 38D8;  -- 	JPOS	 ReadSonar2
           0D4 : 18F5;  -- 	ADD	 MinValue
           0D5 : 10F5;  -- 	STORE	 MinValue	 ; Update MinValue
           0D6 : B801;  -- 	LOADI	 1
           0D7 : 10F6;  -- 	STORE  MinIndex	 ; Update MinIndex
           0D8 : 90AA;  -- 	IN		 DIST2
           0D9 : 20F5;  -- 	SUB	 MinValue	 ; DIST2 - MinValue
           0DA : 38DF;  -- 	JPOS	 ReadSonar3
           0DB : 18F5;  -- 	ADD	 MinValue
           0DC : 10F5;  -- 	STORE	 MinValue	 ; Update MinValue
           0DD : B802;  -- 	LOADI	 2
           0DE : 10F6;  -- 	STORE  MinIndex	 ; Update MinIndex
           0DF : 90AB;  -- 	IN		 DIST3
           0E0 : 20F5;  -- 	SUB	 MinValue	 ; DIST3 - MinValue
           0E1 : 38E6;  -- 	JPOS	 ReadSonar4
           0E2 : 18F5;  -- 	ADD	 MinValue
           0E3 : 10F5;  -- 	STORE	 MinValue	 ; Update MinValue
           0E4 : B803;  -- 	LOADI	 3
           0E5 : 10F6;  -- 	STORE  MinIndex	 ; Update MinIndex
           0E6 : 90AC;  -- 	IN		 DIST4
           0E7 : 20F5;  -- 	SUB	 MinValue	 ; DIST4 - MinValue
           0E8 : 38ED;  -- 	JPOS	 ReadSonar5
           0E9 : 18F5;  -- 	ADD	 MinValue
           0EA : 10F5;  -- 	STORE	 MinValue	 ; Update MinValue
           0EB : B804;  -- 	LOADI	 4
           0EC : 10F6;  -- 	STORE  MinIndex	 ; Update MinIndex
           0ED : 90AD;  -- 	IN		 DIST5
           0EE : 20F5;  -- 	SUB	 MinValue	 ; DIST5 - MinValue
           0EF : 289F;  -- 	JUMP	 State2
           0F0 : 18F5;  -- 	ADD	 MinValue
           0F1 : 10F5;  -- 	STORE	 MinValue	 ; Update MinValue
           0F2 : B805;  -- 	LOADI	 5
           0F3 : 10F6;  -- 	STORE  MinIndex	 ; Update MinIndex
           0F4 : 289F;  -- 	JUMP	 State2
           0F5 : 0000;  -- 	DW		 &H0000
           0F6 : 0000;  -- 	DW		 &H0000
           0F7 : 08F6;  -- 	LOAD	 MinIndex	 ; load the index of the sonar with closest reflector
           0F8 : 9804;  -- 	OUT    SSEG1
           0F9 : 4117;  -- 	JZERO	 TurnTo0
           0FA : 6FFF;  -- 	ADDI	 -1
           0FB : 410F;  -- 	JZERO  TurnTo1
           0FC : 6FFF;  -- 	ADDI	 -1
           0FD : 4106;  -- 	JZERO  TurnTo2
           0FE : 6FFF;  -- 	ADDI	 -1
           0FF : 410B;  -- 	JZERO  TurnTo3
           100 : 6FFF;  -- 	ADDI	 -1
           101 : 4113;  -- 	JZERO  TurnTo4
           102 : 6FFF;  -- 	ADDI	 -1
           103 : 411B;  -- 	JZERO  TurnTo5
           104 : 28A0;  -- 	JUMP	 State3
           105 : 0000;  -- 	DW		 &H0000
           106 : 0B02;  -- 	LOAD	 Zero
           107 : 6855;  -- 	ADDI	 85
           108 : 81C0;  -- 	CALL   	 Mod360
           109 : 1134;  -- 	STORE	 Angle		; prepare parameter for turning
           10A : 291F;  -- 	JUMP	 Turn
           10B : 0B02;  -- 	LOAD	 Zero
           10C : 684B;  -- 	ADDI	 75
           10D : 1134;  -- 	STORE	 Angle
           10E : 291F;  -- 	JUMP	 Turn
           10F : 0B02;  -- 	LOAD	 Zero
           110 : 686E;  -- 	ADDI	 110
           111 : 1134;  -- 	STORE	 Angle
           112 : 291F;  -- 	JUMP	 Turn
           113 : 0B02;  -- 	LOAD	 Zero
           114 : 682E;  -- 	ADDI	 46
           115 : 1134;  -- 	STORE	 Angle
           116 : 291F;  -- 	JUMP	 Turn
           117 : 0B02;  -- 	LOAD	 Zero
           118 : 68B3;  -- 	ADDI	 179
           119 : 1134;  -- 	STORE	 Angle
           11A : 291F;  -- 	JUMP	 Turn
           11B : 0B02;  -- 	LOAD	 Zero
           11C : 6800;  -- 	ADDI	 0
           11D : 1134;  -- 	STORE	 Angle
           11E : 291F;  -- 	JUMP	 Turn
           11F : 0B02;  -- 	LOAD	 Zero
           120 : 98C2;  -- 	OUT	 	 THETA
           121 : 8125;  -- 	CALL	 KeepTurning
           122 : 0B05;  -- 	LOAD	 Three
           123 : 1094;  -- 	STORE	 SonarState	 ; set next state to be state 3
           124 : 28A0;  -- 	JUMP	 State3
           125 : 08F6;  -- 	LOAD	 MinIndex
           126 : 9805;  -- 	OUT		 SSEG2
           127 : 0934;  -- 	LOAD	 Angle				; load parameter into AC
           128 : 117D;  -- 	STORE	 DTheta				; put desired angle to DTheta
           129 : 0B23;  -- 	LOAD	 FSlow
           12A : 117E;  -- 	STORE	 DVel				; set desired speed to FSlow
           12B : 817F;  -- 	CALL	 ControlMovement	; call API
           12C : 90C2;  -- 	IN		 THETA				; read odometry
           12D : 1135;  -- 	STORE	 Temp_THETA
           12E : 0934;  -- 	LOAD	 Angle				; subtract parameter Angle
           12F : 2135;  -- 	SUB		 Temp_THETA
           130 : 81C6;  -- 	CALL	 Abs
           131 : 9804;  -- 	OUT		 SSEG1
           132 : 3925;  -- 	JPOS	 KeepTurning		; keep turning
           133 : 8800;  -- 	RETURN						; otherwise, return
           134 : 0000;  -- 	DW		 &H0000
           135 : 0000;  -- 	DW		 &H0000
           136 : 0B02;  -- 	LOAD	 Zero
           137 : 98C2;  -- 	OUT	 THETA
           138 : 6841;  -- 	ADDI	 65
           139 : 1134;  -- 	STORE	 Angle
           13A : 8125;  -- 	CALL	 KeepTurning
           13B : 28A0;  -- 	JUMP	 State4
           13C : 0B02;  -- 	LOAD	 Zero
           13D : 98C2;  -- 	OUT	 THETA
           13E : 6887;  -- 	ADDI	 135
           13F : 1134;  -- 	STORE	 Angle
           140 : 8125;  -- 	CALL	 KeepTurning
           141 : 8800;  -- 	RETURN
           142 : 0AFD;  -- 	LOAD	STATE
           143 : 5AFE;  -- 	XOR		TEST1
           144 : 414B;  -- 	JZERO	HandleTest1State
           145 : 5AFF;  -- 	XOR		TEST2
           146 : 415B;  -- 	JZERO	HandleTest2State
           147 : 5B00;  -- 	XOR TEST3
           148 : 417C;  -- 	JZERO	HandleTest3State
           149 : 817F;  -- 	CALL   ControlMovement
           14A : B000;  -- 	RETI   ; return from ISR
           14B : 095A;  -- 	LOAD	counter			; read counter
           14C : 6801;  -- 	ADDI	1				; increment counter
           14D : 115A;  -- 	STORE	counter
           14E : 6FE2;  -- 	ADDI 	-30				; check if we've hit 30 (3 seconds)
           14F : 3157;  -- 	JNEG	SkipThis		; if not, keep moving
           150 : 6FF6;  -- 	ADDI	-10				; check if we've hit 10 (1 second) 	
           151 : 3154;  -- 	JNEG	SetVel0			; if not, don't reset our counter
           152 : 4800;  -- 	AND		0				
           153 : 115A;  -- 	STORE	counter			; reset counter if so
           154 : 4800;  -- 	AND		0				; get zero in case AC isn't zero before
           155 : 117E;  -- 	STORE 	DVel
           156 : 2949;  -- 	JUMP GoDoMvmt			; let the MoveAPI do all our heavy lifting
           157 : 0B23;  -- 	LOAD	FSlow
           158 : 117E;  -- 	STORE	DVel
           159 : 2949;  -- 	JUMP	GoDoMvmt		; let the MoveAPI do all our heavy lifting
           15A : 0000;  -- 	counter:	DW &H0000
           15B : 08A8;  -- 	LOAD	DIST0
           15C : 231E;  -- 	SUB		Ft4
           15D : 315F;  -- 	JNEG	Set90
           15E : 2961;  -- 	JUMP	Check1
           15F : B85A;  -- 	LOADI	90
           160 : 2974;  -- 	JUMP	SetTargetAngle
           161 : 08A9;  -- 	LOAD	DIST1
           162 : 231E;  -- 	SUB		Ft4
           163 : B82C;  -- 	LOADI	44
           164 : 2974;  -- 	JUMP	SetTargetAngle
           165 : 08AA;  -- 	LOAD	DIST2
           166 : 231E;  -- 	SUB		Ft4
           167 : B80C;  -- 	LOADI	12
           168 : 2974;  -- 	JUMP	SetTargetAngle
           169 : 08AB;  -- 	LOAD	DIST3
           16A : 231E;  -- 	SUB		Ft4
           16B : BFF4;  -- 	LOADI	-12
           16C : 2974;  -- 	JUMP	SetTargetAngle
           16D : 08AC;  -- 	LOAD	DIST4
           16E : 231E;  -- 	SUB		Ft4
           16F : BFD4;  -- 	LOADI	-44
           170 : 2974;  -- 	JUMP	SetTargetAngle
           171 : 08AD;  -- 	LOAD	DIST5
           172 : 231E;  -- 	SUB		Ft4
           173 : BFA6;  -- 	LOADI	-90
           174 : 18C2;  -- 	ADD		THETA
           175 : 1179;  -- 	STORE	currTarg
           176 : 0979;  -- 	LOAD	currTarg	
           177 : 117D;  -- 	STORE	DTheta
           178 : 2949;  -- 	JUMP	GoDoMvmt
           179 : 0000;  -- 	currTarg:	DW &H0000
           17A : 0000;  -- 	counter1:	DW &H0000
           17B : 0000;  -- 	counter2:	DW &H0000
           17C : 2949;  -- 	JUMP GoDoMvmt
           17D : 0000;  -- DTheta:    DW 0
           17E : 0000;  -- DVel:      DW 0
           17F : B832;  -- 	LOADI  50          ; used for the CapValue subroutine
           180 : 11BF;  -- 	STORE  MaxVal
           181 : 81AC;  -- 	CALL   GetThetaErr ; get the heading error
           182 : 6002;  -- 	SHIFT  2
           183 : 11A9;  -- 	STORE  CMAErr      ; hold temporarily
           184 : 6002;  -- 	SHIFT  2           ; multiply by another 4
           185 : 81B3;  -- 	CALL   CapValue    ; get a +/- max of 50
           186 : 19A9;  -- 	ADD    CMAErr
           187 : 11A9;  -- 	STORE  CMAErr      ; now contains a desired differential
           188 : B9FE;  -- 	LOADI  510
           189 : 11BF;  -- 	STORE  MaxVal
           18A : 097E;  -- 	LOAD   DVel
           18B : 81B3;  -- 	CALL   CapValue    ; ensure velocity is valid
           18C : 117E;  -- 	STORE  DVel        ; overwrite any invalid input
           18D : 19A9;  -- 	ADD    CMAErr
           18E : 81B3;  -- 	CALL   CapValue    ; ensure velocity is valid
           18F : 11AB;  -- 	STORE  CMAR
           190 : 09A9;  -- 	LOAD   CMAErr
           191 : 81C7;  -- 	CALL   Neg         ; left wheel gets negative differential
           192 : 197E;  -- 	ADD    DVel
           193 : 81B3;  -- 	CALL   CapValue
           194 : 11AA;  -- 	STORE  CMAL
           195 : 09A9;  -- 	LOAD   CMAErr
           196 : 6001;  -- 	SHIFT  1           ; double the differential
           197 : 11A9;  -- 	STORE  CMAErr
           198 : 09AB;  -- 	LOAD   CMAR
           199 : 21AA;  -- 	SUB    CMAL        ; calculate the actual differential
           19A : 21A9;  -- 	SUB    CMAErr      ; should be 0 if nothing got capped
           19B : 41A4;  -- 	JZERO  CMADone
           19C : 11A9;  -- 	STORE  CMAErr      ; the missing part
           19D : 19AA;  -- 	ADD    CMAL
           19E : 81B3;  -- 	CALL   CapValue
           19F : 11AA;  -- 	STORE  CMAL
           1A0 : 09AB;  -- 	LOAD   CMAR
           1A1 : 21A9;  -- 	SUB    CMAErr
           1A2 : 81B3;  -- 	CALL   CapValue
           1A3 : 11AB;  -- 	STORE  CMAR
           1A4 : 09AA;  -- 	LOAD   CMAL
           1A5 : 9883;  -- 	OUT    LVELCMD
           1A6 : 09AB;  -- 	LOAD   CMAR
           1A7 : 988B;  -- 	OUT    RVELCMD
           1A8 : 8800;  -- 	RETURN
           1A9 : 0000;  -- 	CMAErr: DW 0       ; holds angle error velocity
           1AA : 0000;  -- 	CMAL:    DW 0      ; holds temp left velocity
           1AB : 0000;  -- 	CMAR:    DW 0      ; holds temp right velocity
           1AC : 90C2;  -- 	IN     THETA
           1AD : 217D;  -- 	SUB    DTheta      ; actual - desired angle
           1AE : 81C7;  -- 	CALL   Neg         ; desired - actual angle
           1AF : 68B4;  -- 	ADDI   180
           1B0 : 81C0;  -- 	CALL   Mod360
           1B1 : 6F4C;  -- 	ADDI   -180
           1B2 : 8800;  -- 	RETURN
           1B3 : 21BF;  -- 	SUB     MaxVal
           1B4 : 39BA;  -- 	JPOS    CapVelHigh
           1B5 : 19BF;  -- 	ADD     MaxVal
           1B6 : 19BF;  -- 	ADD     MaxVal
           1B7 : 31BC;  -- 	JNEG    CapVelLow
           1B8 : 21BF;  -- 	SUB     MaxVal
           1B9 : 8800;  -- 	RETURN
           1BA : 09BF;  -- 	LOAD    MaxVal
           1BB : 8800;  -- 	RETURN
           1BC : 09BF;  -- 	LOAD    MaxVal
           1BD : 81C7;  -- 	CALL    Neg
           1BE : 8800;  -- 	RETURN
           1BF : 01FE;  -- 	MaxVal: DW 510
           1C0 : 31C3;  -- 	JNEG   M360N
           1C1 : 6E98;  -- 	ADDI   -360
           1C2 : 29C0;  -- 	JUMP   Mod360
           1C3 : 6968;  -- 	ADDI   360
           1C4 : 31C3;  -- 	JNEG   M360N
           1C5 : 8800;  -- 	RETURN
           1C6 : 39C9;  -- 	JPOS   Abs_r
           1C7 : 5B01;  -- 	XOR    NegOne       ; Flip all bits
           1C8 : 6801;  -- 	ADDI   1            ; Add one (i.e. negate number)
           1C9 : 8800;  -- 	RETURN
           1CA : 0A2A;  -- 	LOAD   AtanY
           1CB : 81C6;  -- 	CALL   Abs          ; abs(y)
           1CC : 122C;  -- 	STORE  AtanT
           1CD : 0A29;  -- 	LOAD   AtanX        ; abs(x)
           1CE : 81C6;  -- 	CALL   Abs
           1CF : 222C;  -- 	SUB    AtanT        ; abs(x) - abs(y)
           1D0 : 31DB;  -- 	JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           1D1 : 0A29;  -- 	LOAD   AtanX        ; Octants 1, 4, 5, 8
           1D2 : 31D8;  -- 	JNEG   A2_R3
           1D3 : 81EA;  -- 	CALL   A2_calc      ; Octants 1, 8
           1D4 : 31D6;  -- 	JNEG   A2_R1n
           1D5 : 8800;  -- 	RETURN              ; Return raw value if in octant 1
           1D6 : 6968;  -- 	ADDI   360          ; Add 360 if we are in octant 8
           1D7 : 8800;  -- 	RETURN
           1D8 : 81EA;  -- 	CALL   A2_calc      ; Octants 4, 5            
           1D9 : 68B4;  -- 	ADDI   180          ; theta' = theta + 180
           1DA : 8800;  -- 	RETURN
           1DB : 0A2A;  -- 	LOAD   AtanY        ; Swap input arguments
           1DC : 122C;  -- 	STORE  AtanT
           1DD : 0A29;  -- 	LOAD   AtanX
           1DE : 122A;  -- 	STORE  AtanY
           1DF : 0A2C;  -- 	LOAD   AtanT
           1E0 : 1229;  -- 	STORE  AtanX
           1E1 : 39E6;  -- 	JPOS   A2_R2        ; If Y positive, octants 2,3
           1E2 : 81EA;  -- 	CALL   A2_calc      ; else octants 6, 7
           1E3 : 81C7;  -- 	CALL   Neg          ; Negatge the number
           1E4 : 690E;  -- 	ADDI   270          ; theta' = 270 - theta
           1E5 : 8800;  -- 	RETURN
           1E6 : 81EA;  -- 	CALL   A2_calc      ; Octants 2, 3
           1E7 : 81C7;  -- 	CALL   Neg          ; negate the angle
           1E8 : 685A;  -- 	ADDI   90           ; theta' = 90 - theta
           1E9 : 8800;  -- 	RETURN
           1EA : 0A2A;  -- 	LOAD   AtanY
           1EB : 1289;  -- 	STORE  d16sN        ; Y in numerator
           1EC : 0A29;  -- 	LOAD   AtanX
           1ED : 128A;  -- 	STORE  d16sD        ; X in denominator
           1EE : 8216;  -- 	CALL   A2_div       ; divide
           1EF : 0A8F;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           1F0 : 122B;  -- 	STORE  AtanRatio
           1F1 : 1252;  -- 	STORE  m16sA
           1F2 : 1253;  -- 	STORE  m16sB
           1F3 : 820D;  -- 	CALL   A2_mult      ; X^2
           1F4 : 1252;  -- 	STORE  m16sA
           1F5 : 0A2D;  -- 	LOAD   A2c
           1F6 : 1253;  -- 	STORE  m16sB
           1F7 : 820D;  -- 	CALL   A2_mult
           1F8 : 6900;  -- 	ADDI   256          ; 256/256+0.28125X^2
           1F9 : 128A;  -- 	STORE  d16sD
           1FA : 0A2B;  -- 	LOAD   AtanRatio
           1FB : 1289;  -- 	STORE  d16sN        ; Ratio in numerator
           1FC : 8216;  -- 	CALL   A2_div       ; divide
           1FD : 0A8F;  -- 	LOAD   dres16sQ     ; get the quotient (remainder ignored)
           1FE : 1252;  -- 	STORE  m16sA        ; <= result in radians
           1FF : 0A2E;  -- 	LOAD   A2cd         ; degree conversion factor
           200 : 1253;  -- 	STORE  m16sB
           201 : 820D;  -- 	CALL   A2_mult      ; convert to degrees
           202 : 122C;  -- 	STORE  AtanT
           203 : 6017;  -- 	SHIFT  -7           ; check 7th bit
           204 : 4B03;  -- 	AND    One
           205 : 420A;  -- 	JZERO  A2_rdwn      ; round down
           206 : 0A2C;  -- 	LOAD   AtanT
           207 : 6018;  -- 	SHIFT  -8
           208 : 6801;  -- 	ADDI   1            ; round up
           209 : 8800;  -- 	RETURN
           20A : 0A2C;  -- 	LOAD   AtanT
           20B : 6018;  -- 	SHIFT  -8           ; round down
           20C : 8800;  -- 	RETURN
           20D : 822F;  -- 	CALL   Mult16s
           20E : 0A57;  -- 	LOAD   mres16sH
           20F : 6008;  -- 	SHIFT  8            ; move high word of result up 8 bits
           210 : 1257;  -- 	STORE  mres16sH
           211 : 0A56;  -- 	LOAD   mres16sL
           212 : 6018;  -- 	SHIFT  -8           ; move low word of result down 8 bits
           213 : 4B15;  -- 	AND    LowByte
           214 : 5257;  -- 	OR     mres16sH     ; combine high and low words of result
           215 : 8800;  -- 	RETURN
           216 : B809;  -- 	LOADI  9            ; loop 8 times (256 = 2^8)
           217 : 122C;  -- 	STORE  AtanT
           218 : 0A2C;  -- 	LOAD   AtanT
           219 : 6FFF;  -- 	ADDI   -1
           21A : 3A1D;  -- 	JPOS   A2_DN        ; not done; continue shifting
           21B : 8258;  -- 	CALL   Div16s       ; do the standard division
           21C : 8800;  -- 	RETURN
           21D : 122C;  -- 	STORE  AtanT
           21E : 0A89;  -- 	LOAD   d16sN        ; start by trying to scale the numerator
           21F : 6001;  -- 	SHIFT  1
           220 : 5A89;  -- 	XOR    d16sN        ; if the sign changed,
           221 : 3225;  -- 	JNEG   A2_DD        ; switch to scaling the denominator
           222 : 5A89;  -- 	XOR    d16sN        ; get back shifted version
           223 : 1289;  -- 	STORE  d16sN
           224 : 2A18;  -- 	JUMP   A2_DL
           225 : 0A8A;  -- 	LOAD   d16sD
           226 : 6011;  -- 	SHIFT  -1           ; have to scale denominator
           227 : 128A;  -- 	STORE  d16sD
           228 : 2A18;  -- 	JUMP   A2_DL
           229 : 0000;  -- AtanX:      DW 0
           22A : 0000;  -- AtanY:      DW 0
           22B : 0000;  -- AtanRatio:  DW 0        ; =y/x
           22C : 0000;  -- AtanT:      DW 0        ; temporary value
           22D : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           22E : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           22F : B800;  -- 	LOADI  0
           230 : 1254;  -- 	STORE  m16sc        ; clear carry
           231 : 1257;  -- 	STORE  mres16sH     ; clear result
           232 : B810;  -- 	LOADI  16           ; load 16 to counter
           233 : 1255;  -- 	STORE  mcnt16s      
           234 : 0A54;  -- 	LOAD   m16sc        ; check the carry (from previous iteration)
           235 : 4239;  -- 	JZERO  Mult16s_noc  ; if no carry, move on
           236 : 0A57;  -- 	LOAD   mres16sH     ; if a carry, 
           237 : 1A52;  -- 	ADD    m16sA        ;  add multiplicand to result H
           238 : 1257;  -- 	STORE  mres16sH
           239 : 0A53;  -- 	LOAD   m16sB
           23A : 4B03;  -- 	AND    One          ; check bit 0 of multiplier
           23B : 1254;  -- 	STORE  m16sc        ; save as next carry
           23C : 4240;  -- 	JZERO  Mult16s_sh   ; if no carry, move on to shift
           23D : 0A57;  -- 	LOAD   mres16sH     ; if bit 0 set,
           23E : 2252;  -- 	SUB    m16sA        ;  subtract multiplicand from result H
           23F : 1257;  -- 	STORE  mres16sH
           240 : 0A53;  -- 	LOAD   m16sB
           241 : 6011;  -- 	SHIFT  -1           ; shift result L >>1
           242 : 4A51;  -- 	AND    c7FFF        ; clear msb
           243 : 1253;  -- 	STORE  m16sB
           244 : 0A57;  -- 	LOAD   mres16sH     ; load result H
           245 : 600F;  -- 	SHIFT  15           ; move lsb to msb
           246 : 5253;  -- 	OR     m16sB
           247 : 1253;  -- 	STORE  m16sB        ; result L now includes carry out from H
           248 : 0A57;  -- 	LOAD   mres16sH
           249 : 6011;  -- 	SHIFT  -1
           24A : 1257;  -- 	STORE  mres16sH     ; shift result H >>1
           24B : 0A55;  -- 	LOAD   mcnt16s
           24C : 6FFF;  -- 	ADDI   -1           ; check counter
           24D : 3A33;  -- 	JPOS   Mult16s_loop ; need to iterate 16 times
           24E : 0A53;  -- 	LOAD   m16sB
           24F : 1256;  -- 	STORE  mres16sL     ; multiplier and result L shared a word
           250 : 8800;  -- 	RETURN              ; Done
           251 : 7FFF;  -- c7FFF: DW &H7FFF
           252 : 0000;  -- m16sA: DW 0 ; multiplicand
           253 : 0000;  -- m16sB: DW 0 ; multipler
           254 : 0000;  -- m16sc: DW 0 ; carry
           255 : 0000;  -- mcnt16s: DW 0 ; counter
           256 : 0000;  -- mres16sL: DW 0 ; result low
           257 : 0000;  -- mres16sH: DW 0 ; result high
           258 : B800;  -- 	LOADI  0
           259 : 1290;  -- 	STORE  dres16sR     ; clear remainder result
           25A : 128D;  -- 	STORE  d16sC1       ; clear carry
           25B : 0A89;  -- 	LOAD   d16sN
           25C : 5A8A;  -- 	XOR    d16sD
           25D : 128B;  -- 	STORE  d16sS        ; sign determination = N XOR D
           25E : B811;  -- 	LOADI  17
           25F : 128C;  -- 	STORE  d16sT        ; preload counter with 17 (16+1)
           260 : 0A8A;  -- 	LOAD   d16sD
           261 : 81C6;  -- 	CALL   Abs          ; take absolute value of denominator
           262 : 128A;  -- 	STORE  d16sD
           263 : 0A89;  -- 	LOAD   d16sN
           264 : 81C6;  -- 	CALL   Abs          ; take absolute value of numerator
           265 : 1289;  -- 	STORE  d16sN
           266 : 0A89;  -- 	LOAD   d16sN
           267 : 601F;  -- 	SHIFT  -15          ; get msb
           268 : 4B03;  -- 	AND    One          ; only msb (because shift is arithmetic)
           269 : 128E;  -- 	STORE  d16sC2       ; store as carry
           26A : 0A89;  -- 	LOAD   d16sN
           26B : 6001;  -- 	SHIFT  1            ; shift <<1
           26C : 528D;  -- 	OR     d16sC1       ; with carry
           26D : 1289;  -- 	STORE  d16sN
           26E : 0A8C;  -- 	LOAD   d16sT
           26F : 6FFF;  -- 	ADDI   -1           ; decrement counter
           270 : 4280;  -- 	JZERO  Div16s_sign  ; if finished looping, finalize result
           271 : 128C;  -- 	STORE  d16sT
           272 : 0A90;  -- 	LOAD   dres16sR
           273 : 6001;  -- 	SHIFT  1            ; shift remainder
           274 : 528E;  -- 	OR     d16sC2       ; with carry from other shift
           275 : 228A;  -- 	SUB    d16sD        ; subtract denominator from remainder
           276 : 327B;  -- 	JNEG   Div16s_add   ; if negative, need to add it back
           277 : 1290;  -- 	STORE  dres16sR
           278 : B801;  -- 	LOADI  1
           279 : 128D;  -- 	STORE  d16sC1       ; set carry
           27A : 2A66;  -- 	JUMP   Div16s_loop
           27B : 1A8A;  -- 	ADD    d16sD        ; add denominator back in
           27C : 1290;  -- 	STORE  dres16sR
           27D : B800;  -- 	LOADI  0
           27E : 128D;  -- 	STORE  d16sC1       ; clear carry
           27F : 2A66;  -- 	JUMP   Div16s_loop
           280 : 0A89;  -- 	LOAD   d16sN
           281 : 128F;  -- 	STORE  dres16sQ     ; numerator was used to hold quotient result
           282 : 0A8B;  -- 	LOAD   d16sS        ; check the sign indicator
           283 : 3285;  -- 	JNEG   Div16s_neg
           284 : 8800;  -- 	RETURN
           285 : 0A8F;  -- 	LOAD   dres16sQ     ; need to negate the result
           286 : 81C7;  -- 	CALL   Neg
           287 : 128F;  -- 	STORE  dres16sQ
           288 : 8800;  -- 	RETURN	
           289 : 0000;  -- d16sN: DW 0 ; numerator
           28A : 0000;  -- d16sD: DW 0 ; denominator
           28B : 0000;  -- d16sS: DW 0 ; sign value
           28C : 0000;  -- d16sT: DW 0 ; temp counter
           28D : 0000;  -- d16sC1: DW 0 ; carry value
           28E : 0000;  -- d16sC2: DW 0 ; carry value
           28F : 0000;  -- dres16sQ: DW 0 ; quotient result
           290 : 0000;  -- dres16sR: DW 0 ; remainder result
           291 : 0ABB;  -- 	LOAD   L2X
           292 : 81C6;  -- 	CALL   Abs
           293 : 12BD;  -- 	STORE  L2T1
           294 : 0ABC;  -- 	LOAD   L2Y
           295 : 81C6;  -- 	CALL   Abs
           296 : 22BD;  -- 	SUB    L2T1
           297 : 32B3;  -- 	JNEG   GDSwap    ; swap if needed to get largest value in X
           298 : 1ABD;  -- 	ADD    L2T1
           299 : 1252;  -- 	STORE  m16sa
           29A : B8F6;  -- 	LOADI  246       ; max * 246
           29B : 1253;  -- 	STORE  m16sB
           29C : 822F;  -- 	CALL   Mult16s
           29D : 0A57;  -- 	LOAD   mres16sH
           29E : 6008;  -- 	SHIFT  8
           29F : 12BE;  -- 	STORE  L2T2
           2A0 : 0A56;  -- 	LOAD   mres16sL
           2A1 : 6018;  -- 	SHIFT  -8        ; / 256
           2A2 : 4B15;  -- 	AND    LowByte
           2A3 : 52BE;  -- 	OR     L2T2
           2A4 : 12BF;  -- 	STORE  L2T3
           2A5 : 0ABD;  -- 	LOAD   L2T1
           2A6 : 1252;  -- 	STORE  m16sa
           2A7 : B868;  -- 	LOADI  104       ; min * 104
           2A8 : 1253;  -- 	STORE  m16sB
           2A9 : 822F;  -- 	CALL   Mult16s
           2AA : 0A57;  -- 	LOAD   mres16sH
           2AB : 6008;  -- 	SHIFT  8
           2AC : 12BE;  -- 	STORE  L2T2
           2AD : 0A56;  -- 	LOAD   mres16sL
           2AE : 6018;  -- 	SHIFT  -8        ; / 256
           2AF : 4B15;  -- 	AND    LowByte
           2B0 : 52BE;  -- 	OR     L2T2
           2B1 : 1ABF;  -- 	ADD    L2T3     ; sum
           2B2 : 8800;  -- 	RETURN
           2B3 : 1ABD;  -- 	ADD    L2T1
           2B4 : 12BE;  -- 	STORE  L2T2
           2B5 : 0ABD;  -- 	LOAD   L2T1
           2B6 : 12BF;  -- 	STORE  L2T3
           2B7 : 0ABE;  -- 	LOAD   L2T2
           2B8 : 12BD;  -- 	STORE  L2T1
           2B9 : 0ABF;  -- 	LOAD   L2T3
           2BA : 2A99;  -- 	JUMP   CalcDist
           2BB : 0000;  -- L2X:  DW 0
           2BC : 0000;  -- L2Y:  DW 0
           2BD : 0000;  -- L2T1: DW 0
           2BE : 0000;  -- L2T2: DW 0
           2BF : 0000;  -- L2T3: DW 0
           2C0 : 9802;  -- 	OUT    TIMER
           2C1 : 9002;  -- 	IN     TIMER
           2C2 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           2C3 : 6FF6;  -- 	ADDI   -10         ; 1 second at 10Hz.
           2C4 : 32C1;  -- 	JNEG   Wloop
           2C5 : 8800;  -- 	RETURN
           2C6 : 82DE;  -- 	CALL   GetBattLvl
           2C7 : 42C6;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           2C8 : 2329;  -- 	SUB    MinBatt
           2C9 : 32CC;  -- 	JNEG   DeadBatt
           2CA : 1B29;  -- 	ADD    MinBatt     ; get original value back
           2CB : 8800;  -- 	RETURN
           2CC : B820;  -- 	LOADI  &H20
           2CD : 980A;  -- 	OUT    BEEP        ; start beep sound
           2CE : 82DE;  -- 	CALL   GetBattLvl  ; get the battery level
           2CF : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           2D0 : 9805;  -- 	OUT    SSEG2
           2D1 : 9806;  -- 	OUT    LCD
           2D2 : 0B02;  -- 	LOAD   Zero
           2D3 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           2D4 : 9801;  -- 	OUT    LEDS        ; all LEDs on
           2D5 : 9807;  -- 	OUT    XLEDS
           2D6 : 82C0;  -- 	CALL   Wait1       ; 1 second
           2D7 : B940;  -- 	LOADI  &H140       ; short, high-pitched beep
           2D8 : 980A;  -- 	OUT    BEEP        ; stop beeping
           2D9 : 0B02;  -- 	LOAD   Zero
           2DA : 9801;  -- 	OUT    LEDS        ; LEDs off
           2DB : 9807;  -- 	OUT    XLEDS
           2DC : 82C0;  -- 	CALL   Wait1       ; 1 second
           2DD : 2ACC;  -- 	JUMP   DeadBatt    ; repeat forever
           2DE : 0B2B;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           2DF : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           2E0 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           2E1 : 82EC;  -- 	CALL   BlockI2C    ; wait for it to finish
           2E2 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           2E3 : 8800;  -- 	RETURN
           2E4 : 82EC;  -- 	CALL   BlockI2C    ; wait for idle
           2E5 : 0B2A;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           2E6 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           2E7 : 0B02;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           2E8 : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           2E9 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           2EA : 82EC;  -- 	CALL   BlockI2C    ; wait for it to finish
           2EB : 8800;  -- 	RETURN
           2EC : 0B02;  -- 	LOAD   Zero
           2ED : 12FA;  -- 	STORE  Temp        ; Used to check for timeout
           2EE : 0AFA;  -- 	LOAD   Temp
           2EF : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           2F0 : 12FA;  -- 	STORE  Temp
           2F1 : 42F5;  -- 	JZERO  I2CError    ; Timeout occurred; error
           2F2 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           2F3 : 3AEE;  -- 	JPOS   BI2CL       ; If not 0, try again
           2F4 : 8800;  -- 	RETURN             ; Else return
           2F5 : 0B02;  -- 	LOAD   Zero
           2F6 : 692C;  -- 	ADDI   &H12C       ; "I2C"
           2F7 : 9804;  -- 	OUT    SSEG1
           2F8 : 9805;  -- 	OUT    SSEG2       ; display error message
           2F9 : 2AF5;  -- 	JUMP   I2CError
           2FA : 0000;  -- Temp:     	DW 0 ; "Temp" is not a great name, but can be useful
           2FB : 0000;  -- PositionX: 	DW &H0000
           2FC : 0000;  -- PositionY: 	DW &H0000
           2FD : 0000;  -- STATE:		DW &H0000	; STATE variable -- track the main state
           2FE : 0000;  -- TEST1:		DW &B00000000
           2FF : 0001;  -- TEST2:		DW &B00000001
           300 : 0002;  -- TEST3:		DW &B00000010
           301 : FFFF;  -- NegOne:   DW -1
           302 : 0000;  -- Zero:     DW 0
           303 : 0001;  -- One:      DW 1
           304 : 0002;  -- Two:      DW 2
           305 : 0003;  -- Three:    DW 3
           306 : 0004;  -- Four:     DW 4
           307 : 0005;  -- Five:     DW 5
           308 : 0006;  -- Six:      DW 6
           309 : 0007;  -- Seven:    DW 7
           30A : 0008;  -- Eight:    DW 8
           30B : 0009;  -- Nine:     DW 9
           30C : 000A;  -- Ten:      DW 10
           30D : 0001;  -- Mask0:    DW &B00000001
           30E : 0002;  -- Mask1:    DW &B00000010
           30F : 0004;  -- Mask2:    DW &B00000100
           310 : 0008;  -- Mask3:    DW &B00001000
           311 : 0010;  -- Mask4:    DW &B00010000
           312 : 0020;  -- Mask5:    DW &B00100000
           313 : 0040;  -- Mask6:    DW &B01000000
           314 : 0080;  -- Mask7:    DW &B10000000
           315 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           316 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           317 : FFFF;  -- FullMask: DW &HFFFF
           318 : 03C1;  -- OneMeter:  DW 961       ; ~1m in 1.04mm units
           319 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           31A : 0125;  -- Ft1:	   DW 293	   ; ~1ft
           31B : 024A;  -- Ft2:       DW 586       ; ~2ft in 1.04mm units
           31C : 02BC;  -- Ft25:	   DW 700
           31D : 036F;  -- Ft3:       DW 879
           31E : 0494;  -- Ft4:       DW 1172
           31F : 005A;  -- Deg90:     DW 90        ; 90 degrees in odometer units
           320 : 00B4;  -- Deg180:    DW 180       ; 180
           321 : 010E;  -- Deg270:    DW 270       ; 270
           322 : 0168;  -- Deg360:    DW 360       ; can never actually happen; for math only
           323 : 0064;  -- FSlow:     DW 100       ; 100 is about the lowest velocity value that will move
           324 : FF9C;  -- RSlow:     DW -100
           325 : 00E1;  -- FMid:      DW 225       ; 350 is a medium speed
           326 : FEA2;  -- RMid:      DW -350
           327 : 01F4;  -- FFast:     DW 500       ; 500 is almost max speed (511 is max)
           328 : FE0C;  -- RFast:     DW -500
           329 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           32A : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           32B : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
           32C : 0000;  -- 	DW 0
  END;
